import type { Course } from "@/lib/types";

interface CourseEditorProps {
  courses: Course[];
  excludedSections: string[];
  onToggleSection(sectionId: string): void;
}

export function CourseEditor({ courses, excludedSections, onToggleSection }: CourseEditorProps) {
  const excluded = new Set(excludedSections);

  return (
    <section className="space-y-4">
      <header>
        <h2 className="text-lg font-semibold">Sections</h2>
        <p className="text-sm text-gray-500 dark:text-gray-400">
          Toggle sections to exclude them from solving. Capacity and availability indicators help spot overfilled classes.
        </p>
      </header>
      <div className="space-y-4">
        {courses.map((course) => (
          <article key={course.id} className="rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-900">
            <header className="mb-3 flex flex-wrap items-center justify-between gap-2">
              <div>
                <h3 className="text-base font-semibold">
                  {course.code} <span className="text-gray-500">? {course.name}</span>
                </h3>
                {course.units ? (
                  <p className="text-xs text-gray-500">{course.units} units</p>
                ) : null}
              </div>
              <span className="rounded-full bg-gray-100 px-3 py-1 text-xs font-medium text-gray-600 dark:bg-gray-800 dark:text-gray-300">
                {course.sections.length} section{course.sections.length === 1 ? "" : "s"}
              </span>
            </header>
            <ul className="space-y-3">
              {course.sections.map((section) => {
                const openStatus = getOpenLabel(section.open);
                const capacityInfo = formatCapacity(section.capacity, section.enrolled, section.waitlist);
                const isExcluded = excluded.has(section.id);

                return (
                  <li key={section.id} className={`rounded-md border px-3 py-2 text-sm transition-colors ${
                    isExcluded
                      ? "border-red-200 bg-red-50 text-red-800 dark:border-red-800 dark:bg-red-950/40"
                      : "border-gray-200 bg-gray-50 text-gray-800 dark:border-gray-700 dark:bg-gray-800"
                  }`}>
                    <div className="flex flex-wrap items-center justify-between gap-2">
                      <div className="font-medium">
                        {section.sectionCode}
                      </div>
                      <button
                        type="button"
                        onClick={() => onToggleSection(section.id)}
                        className={`rounded-md border px-2 py-1 text-xs font-semibold transition-colors ${
                          isExcluded
                            ? "border-red-500 text-red-600 hover:bg-red-100 dark:hover:bg-red-900/40"
                            : "border-green-600 text-green-600 hover:bg-green-100 dark:hover:bg-green-900/40"
                        }`}
                      >
                        {isExcluded ? "Excluded" : "Included"}
                      </button>
                    </div>
                    <ul className="mt-2 space-y-1 font-mono text-xs">
                      {section.meetings.map((meeting, idx) => (
                        <li key={idx}>
                          {formatDay(meeting.day)} {formatTime(meeting.start)}-{formatTime(meeting.end)} {meeting.room} {meeting.kind ?? ""}
                        </li>
                      ))}
                    </ul>
                    <div className="mt-2 flex flex-wrap gap-2 text-xs">
                      {capacityInfo ? (
                        <span className="rounded-full bg-white px-2 py-1 text-gray-600 shadow-sm dark:bg-gray-900">
                          {capacityInfo}
                        </span>
                      ) : null}
                      {openStatus ? (
                        <span
                          className={`rounded-full px-2 py-1 font-semibold ${
                            openStatus === "Open"
                              ? "bg-green-100 text-green-700 dark:bg-green-900/40"
                              : "bg-red-100 text-red-700 dark:bg-red-900/40"
                          }`}
                        >
                          {openStatus}
                        </span>
                      ) : null}
                    </div>
                  </li>
                );
              })}
            </ul>
          </article>
        ))}
      </div>
    </section>
  );
}

function formatDay(day: number): string {
  const map: Record<number, string> = { 1: "Mon", 2: "Tue", 3: "Wed", 4: "Thu", 5: "Fri", 6: "Sat", 7: "Sun" };
  return map[day] ?? `Day ${day}`;
}

function formatTime(minutes: number): string {
  const h = Math.floor(minutes / 60);
  const m = minutes % 60;
  const suffix = h >= 12 ? "PM" : "AM";
  const hour = ((h + 11) % 12) + 1;
  return `${hour}:${m.toString().padStart(2, "0")}${suffix}`;
}

function getOpenLabel(flag: boolean | undefined): string | null {
  if (flag === undefined) {
    return null;
  }
  return flag ? "Open" : "Closed";
}

function formatCapacity(capacity?: number, enrolled?: number, waitlist?: number): string | null {
  const pieces: string[] = [];
  if (capacity !== undefined) {
    pieces.push(`Cap ${capacity}`);
  }
  if (enrolled !== undefined) {
    pieces.push(`Enrolled ${enrolled}`);
  }
  if (waitlist !== undefined) {
    pieces.push(`Wait ${waitlist}`);
  }
  return pieces.length ? pieces.join(" ? ") : null;
}

